{
  "paragraphs": [
    {
      "text": "%md\n\n# How to test it\n\nGo to the command line and create a consumer\n\n```\ndocker exec -it broker kafka-console-consumer --topic my-topic \\\n  --bootstrap-server broker:9092\n```\n",
      "user": "anonymous",
      "dateUpdated": "2019-01-05 22:51:47.445",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eHow to test it\u003c/h1\u003e\n\u003cp\u003eGo to the command line and create a consumer\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edocker exec -it broker kafka-console-consumer --topic my-topic \\\n  --bootstrap-server broker:9092\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1546642537397_-102796952",
      "id": "20181213-074655_1776854911",
      "dateCreated": "2019-01-04 22:55:37.397",
      "dateStarted": "2019-01-05 22:51:47.450",
      "dateFinished": "2019-01-05 22:51:47.468",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# streams.publish\nThis procedure allows custom message streaming from Neo4j to the configured environment by using the underlying configured Producer.\n\n## How to use it\n\n```\nCALL streams.publish(\u0027my-topic\u0027, \u0027Hello World from Neo4j!\u0027)\n```",
      "user": "anonymous",
      "dateUpdated": "2019-01-05 22:51:45.496",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003estreams.publish\u003c/h1\u003e\n\u003cp\u003eThis procedure allows custom message streaming from Neo4j to the configured environment by using the underlying configured Producer.\u003c/p\u003e\n\u003ch2\u003eHow to use it\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003eCALL streams.publish(\u0026#39;my-topic\u0026#39;, \u0026#39;Hello World from Neo4j!\u0026#39;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1546642537398_-1833349498",
      "id": "20181213-075522_2039443508",
      "dateCreated": "2019-01-04 22:55:37.398",
      "dateStarted": "2019-01-05 22:51:45.496",
      "dateFinished": "2019-01-05 22:51:45.519",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Publish your first event",
      "text": "%neo4j\nCALL streams.publish(\u0027my-topic\u0027, \u0027Hello World from Neo4j!\u0027)",
      "user": "anonymous",
      "dateUpdated": "2019-04-25 07:42:18.280",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1546642537398_-1911583562",
      "id": "20181212-222435_1247313594",
      "dateCreated": "2019-01-04 22:55:37.398",
      "dateStarted": "2019-04-25 07:42:18.492",
      "dateFinished": "2019-04-25 07:42:21.325",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n# Create a new Consumer\n\n```\ndocker exec -it broker kafka-console-consumer --topic persons \\\n  --bootstrap-server broker:9092\n```\n",
      "user": "anonymous",
      "dateUpdated": "2019-01-05 22:51:51.586",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eCreate a new Consumer\u003c/h1\u003e\n\u003cpre\u003e\u003ccode\u003edocker exec -it broker kafka-console-consumer --topic persons \\\n  --bootstrap-server broker:9092\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1546728670504_-725354973",
      "id": "20190105-225110_1070651456",
      "dateCreated": "2019-01-05 22:51:10.504",
      "dateStarted": "2019-01-05 22:51:41.030",
      "dateFinished": "2019-01-05 22:51:41.039",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Publish a JSON",
      "text": "%neo4j\nCALL streams.publish(\u0027persons\u0027, [{name: \"Andrea\", surname: \"Santurbano\"}, {name: \"Michael\", surname: \"Hunger\"}])",
      "user": "anonymous",
      "dateUpdated": "2019-04-25 07:42:29.966",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1546642537398_-271197802",
      "id": "20181213-174451_1136633655",
      "dateCreated": "2019-01-04 22:55:37.398",
      "dateStarted": "2019-04-25 07:42:30.031",
      "dateFinished": "2019-04-25 07:42:30.272",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# streams.consume\nThis procedure allows to consume messages from a given topic.\n\n## How to use it:\n\nImagine you have a producer that publish events like this `{\"name\": \"Andrea\", \"surname\": \"Santurbano\"}`, we can create user nodes in this way:\n```\nCALL streams.consume(\u0027my-topic\u0027, {\u003cconfig\u003e}) YIELD event\nCREATE (p:Person{firstName: event.data.name, lastName: event.data.surname})\n```\n",
      "user": "anonymous",
      "dateUpdated": "2019-01-06 23:33:53.039",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003estreams.consume\u003c/h1\u003e\n\u003cp\u003eThis procedure allows to consume messages from a given topic.\u003c/p\u003e\n\u003ch2\u003eHow to use it:\u003c/h2\u003e\n\u003cp\u003eImagine you have a producer that publish events like this \u003ccode\u003e{\u0026quot;name\u0026quot;: \u0026quot;Andrea\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Santurbano\u0026quot;}\u003c/code\u003e, we can create user nodes in this way:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCALL streams.consume(\u0026#39;my-topic\u0026#39;, {\u0026lt;config\u0026gt;}) YIELD event\nCREATE (p:Person{firstName: event.data.name, lastName: event.data.surname})\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1546642537399_-386592139",
      "id": "20181213-075725_173270105",
      "dateCreated": "2019-01-04 22:55:37.399",
      "dateStarted": "2019-01-06 23:33:53.046",
      "dateFinished": "2019-01-06 23:33:54.912",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Create a Producer\n\n```\ndocker exec -it broker kafka-console-producer --topic persons-topic \\\n  --broker-list broker:9092\n```\n\n## Send the data\n\n```\n[{\"name\": \"Andrea\", \"surname\": \"Santurbano\"}, {\"name\": \"Michael\", \"surname\": \"Hunger\"}]\n```",
      "user": "anonymous",
      "dateUpdated": "2019-04-25 07:45:00.073",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eCreate a Producer\u003c/h1\u003e\n\u003cpre\u003e\u003ccode\u003edocker exec -it broker kafka-console-producer --topic persons-topic \\\n  --broker-list broker:9092\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch2\u003eSend the data\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e[{\u0026quot;name\u0026quot;: \u0026quot;Andrea\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Santurbano\u0026quot;}, {\u0026quot;name\u0026quot;: \u0026quot;Michael\u0026quot;, \u0026quot;surname\u0026quot;: \u0026quot;Hunger\u0026quot;}]\n\u003c/code\u003e\u003c/pre\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1546818159017_-165812926",
      "id": "20190106-234239_1248854726",
      "dateCreated": "2019-01-06 23:42:39.017",
      "dateStarted": "2019-04-25 07:45:00.074",
      "dateFinished": "2019-04-25 07:45:02.407",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Consume your data from topic",
      "text": "%neo4j\ncall streams.consume(\u0027persons-topic\u0027, {timeout: 5000, from: \u0027earliest\u0027}) YIELD event\nunwind event.data as elem\nreturn elem",
      "user": "anonymous",
      "dateUpdated": "2019-04-25 07:45:13.142",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "elem.name": "string",
                      "elem.surname": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "tableHide": false,
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "elem.name\telem.surname\nAndrea\tSanturbano\nMichael\tHunger\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1546642537399_1408068558",
      "id": "20181212-222500_1686009915",
      "dateCreated": "2019-01-04 22:55:37.399",
      "dateStarted": "2019-04-25 07:45:13.175",
      "dateFinished": "2019-04-25 07:45:16.391",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%neo4j\n",
      "user": "anonymous",
      "dateUpdated": "2019-01-04 22:55:37.401",
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/undefined",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1546642537400_1715694093",
      "id": "20181212-222533_201247004",
      "dateCreated": "2019-01-04 22:55:37.401",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Medium/Part 3/Streams Procedures",
  "id": "2E1SKW52P",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "neo4j:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}